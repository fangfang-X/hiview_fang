///#include "sxb_api.h"
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "fw/mxml/inc/mxml.h"

#ifdef DEBUG
#define printd printf
#else
#define printd(...)
#endif

// 类型绑定;
#define STRUCT(TYPE) void sxb_bind_##TYPE(mxml_node_t* xml, int m, TYPE *str, int i, int size)
typedef void (sxb_bind_T)(mxml_node_t* xml, int m, void *str, int i, int size);

typedef unsigned long long uint64;
typedef unsigned int   uint32;
typedef unsigned short uint16;
typedef unsigned char  uint8;

#define sxb_bind_uint32  sxb_bind_int
#define sxb_bind_uint16  sxb_bind_short   
#define sxb_bind_uint8   sxb_bind_char

static void sxb_bind_string(mxml_node_t* xml, int m, char *str, int i, int size) 
{
  if(m)
  {
		if( xml && xml->child && xml->child->value.opaque)
		{
			strncpy((char*)str + i*size, xml->child->value.opaque, size-1);
			*((char*)str + i*size -1) = 0;
		}
  }
  else
  {
    mxmlNewText(xml, 0, (char*)str + i*size);
  }
}

static void sxb_bind_int(mxml_node_t* xml, int m, int *str, int i, int size) 
{
  if(m)
  {
		if( xml && xml->child && xml->child->value.opaque)
		{
      *(str+i) = atoi((char*)xml->child->value.opaque);
		}
  }
  else
  {
    char int_str[32];
    snprintf(int_str, sizeof(int_str), "%d", *(str+i));
    mxmlNewText(xml, 0, int_str);
  }
}

static void sxb_bind_bool(mxml_node_t* xml, int m, int *str, int i, int size) 
{
  if(m)
  {
    if( xml && xml->child && xml->child->value.opaque)
    {
      printd(">>>>>> opaque:[%s]\n", (char*)xml->child->value.opaque);
      *(str+i) = (!strcasecmp((char*)xml->child->value.opaque, "true"))?1:0;
    }
  }
  else
  {
    mxmlNewText(xml, 0, *(str+i)?"true":"false");
  }
}

static void sjb_bind_short(mxml_node_t* xml, int m, short *str, int i, int size) 
{
  if(m)
  {
		if( xml && xml->child && xml->child->value.opaque)
		{
      *(str+i) = atoi((char*)xml->child->value.opaque);
		}
  }
  else
  {
    char int_str[32];
    snprintf(int_str, sizeof(int_str), "%d", *(str+i));
    mxmlNewText(xml, 0, int_str);
  }
}

static void sjb_bind_char(mxml_node_t* xml, int m, char *str, int i, int size) 
{
  if(m)
  {
		if( xml && xml->child && xml->child->value.opaque)
		{
      *(str+i) = atoi((char*)xml->child->value.opaque);
		}
  }
  else
  {
    char int_str[32];
    snprintf(int_str, sizeof(int_str), "%d", *(str+i));
    mxmlNewText(xml, 0, int_str);
  }
}

static void sjb_bind_float(mxml_node_t* xml, int m, float *str, int i, int size) 
{
  if(m)
  {
		if( xml && xml->child && xml->child->value.opaque)
		{
      *(str+i) = atof((char*)xml->child->value.opaque);
		}
  }
  else
  {
    char int_str[32];
    snprintf(int_str, sizeof(int_str), "%lf", *(str+i));
    mxmlNewText(xml, 0, int_str);
  }
}

static void sjb_bind_double(mxml_node_t* xml, int m, double *str, int i, int size) 
{
  if(m)
  {
		if( xml && xml->child && xml->child->value.opaque)
		{
      *(str+i) = atof((char*)xml->child->value.opaque);
		}
  }
  else
  {
    char int_str[32];
    snprintf(int_str, sizeof(int_str), "%lf", *(str+i));
    mxmlNewText(xml, 0, int_str);
  }
}

static void sjb_bind_uint64(mxml_node_t* xml, int m, uint64 *str, int i, int size) 
{  
  if(m)
  {
		if( xml && xml->child && xml->child->value.opaque)
		{
      *(str+i) = strtoull((char*)xml->child->value.opaque, NULL, 16);
		}
  }
  else
  {
    char int_str[32];
    snprintf(int_str, sizeof(int_str), "%llx", *(str+i));
    mxmlNewText(xml, 0, int_str);
  }
}

// 代码生成;
#define STRING(HOLDER,SIZE) do { \
  if(m) { if(!xml) break; \
          mxml_node_t* node = mxmlFindElement(xml, xml, #HOLDER, NULL, NULL, MXML_DESCEND); \
          sxb_bind_string( node, m, (str+i)-> HOLDER, 0, SIZE);\
        }\
  else { \
        mxml_node_t* node = mxmlNewElement(xml, #HOLDER); \
        sxb_bind_string( node, m, (str+i)-> HOLDER, 0, SIZE); \
       }\
}while(0)

#define FIELD(TYPE, HOLDER) do { \
  if (m) { if(!xml) break; \
          mxml_node_t* node = mxmlFindElement(xml, xml, #HOLDER, NULL, NULL, MXML_DESCEND); \
          sxb_bind_##TYPE( node, m, &(str+i)-> HOLDER, 0, 1);\
         }\
  else { \
          mxml_node_t* node = mxmlNewElement(xml, #HOLDER); \
          sxb_bind_##TYPE( node, m, &(str+i)-> HOLDER, 0, 1); \
       }\
}while(0)


#define ARR_STRING(sub)       sub[0]        // string flag;
#define ARR_CURR(sub)         sub[1]        // curr array level;
#define ARR_SUBN(sub)         sub[2]        // total array level number;
#define ARR_SUBS(sub)         sub[3+sub[1]] // curr level elem number;
#define ARR_DUP(dst,sub)      int dst[64]; memcpy(dst, sub, 64)
#define ARR_SKIP(sub, tsize)  ({int i = 0; int ret = tsize; /* bytes [from curr level to end level] */\
                                for(i = ARR_CURR(sub); i < (ARR_STRING(sub)?ARR_SUBN(sub)-1:ARR_SUBN(sub)); i++) \
                                  ret *= sub[3+i]; \
                                ret=ret;\
                              })
// 数组绑定;
static int sxb_bind_array(mxml_node_t* xml, int m, char *str, int size, int* sub, sxb_bind_T *cb, int tsize)
{
  int j = 0;
 
  ARR_CURR(sub) += 1;
    
  if ( m ) //from xml
	{
		if( xml != NULL)
		{
		  mxml_node_t* child = NULL;
		  
  		for ( j=0; j<size; j++)
  		{
        child = mxmlFindElement(child?:xml, xml, "Item", NULL, NULL, MXML_DESCEND);
  			if(!child)
  			  break;
  			
  			if( ARR_STRING(sub) && ARR_CURR(sub) + 1 == ARR_SUBN(sub))
  			{
  			  printd("<<<<<< string j:%d, tsize:%d\n", j, tsize);
  			  cb(child, m, str, j, tsize);
  			}
  			else if (ARR_CURR(sub) == ARR_SUBN(sub))
  		  {
  		    printd("<<<<<< !!!!!! j:%d, tsize:%d\n", j, tsize);
  		    cb(child, m, str, j, tsize);
  		  }
  			else
  		  {
  		    // xml not support arrayXX
  		  }
  		}
	  }
	}
	else //to xml
	{
		for ( j=0; j<size; j++)
		{
		  mxml_node_t* node = mxmlNewElement(xml, "Item");
		  
		  if( ARR_STRING(sub) && ARR_CURR(sub) + 1 == ARR_SUBN(sub))
		  {
		    printd(">>>>>> string j:%d, tsize:%d\n", j, tsize);
  			cb(node, m, str, j, tsize);
		  }
		  else if(ARR_CURR(sub) == ARR_SUBN(sub))
		  {
		    printd(">>>>>> !!!!!! j:%d, tsize:%d\n", j, tsize);
  			cb(node, m, str, j, tsize);
		  }
		  else
		  {
        // xml not support arrayXX
		  }
		}
	}

	return j; // curr level ele number;
}

#ifdef __ELE__
#define __ELE_SIZE(HOLDER,SIZE)  int *n = (int*)&(str+i)-> HOLDER##__
#else
#define __ELE_SIZE(HOLDER,SIZE)  int _n = SIZE; int *n = &_n;
#endif

#define __ARRAY(TYPE,HOLDER,SIZE,SUB,TSIZE) do { \
  __ELE_SIZE(HOLDER,SIZE); \
  if(m) { if(!xml) break; \
        mxml_node_t* node = mxmlFindElement(xml, xml, #HOLDER, NULL, NULL, MXML_DESCEND); if(!node) break;\
        *n = sxb_bind_array(node, m, (char*)((str+i)-> HOLDER), ARR_SUBS(sub), SUB, (sxb_bind_T*)sxb_bind_##TYPE, TSIZE);\
        printd("<<<<<< @@@ %s [%d] @@@\n", #HOLDER, *n);\
        }\
  else {\
      mxml_node_t* node = mxmlNewElement(xml, #HOLDER); \
      *n = (*n >= 0 && *n <= SIZE)?*n:SIZE; \
      char nstr[32]; sprintf(nstr, "%d", *n); mxmlElementSetAttr(node, "Num", nstr);  \
  		printd(">>>>>> @@@ %s [%d] @@@\n", #HOLDER, *n);\
      sxb_bind_array( node, m, (char*)((str+i)-> HOLDER), *n, SUB, (sxb_bind_T*)sxb_bind_##TYPE, TSIZE);\
      }\
}while(0)

typedef char string;

#define ARRAY(TYPE,HOLDER,SIZE) do { \
    int sub[64] = {0, 0, 1, SIZE}; \
    sub[0] = strstr( #TYPE, "string")?1:0;    \
    __ARRAY(TYPE,HOLDER,SIZE,sub, sizeof(TYPE)); \
}while(0)

#define UNION_B(HOLDER) int HOLDER = (str+i)-> HOLDER; \
                        switch(HOLDER) { default: break
#define UNION_C(COND, TYPE, HOLDER) case COND: { FIELD(TYPE, HOLDER); } break
#define UNION_S(COND, HOLDER, SIZE) case COND: { STRING(HOLDER, SIZE); } break
#define UNION_E() }

//<END.>